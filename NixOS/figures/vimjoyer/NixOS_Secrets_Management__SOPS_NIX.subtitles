I received numerous requests to make a
video about declaratively managing
secrets with NYX over the last couple of
weeks and so today I wanted to cover a
way to integrate soaps a simple Secrets
management tool into nyos by the end of
this video you will have set up a system
that can decrypt an easy to edit file of
your preferred format and then pass the
secrets inside it to services and
programs or simply leave them in an easy
to access location where you can read
them yourself to bridge the gap between
soaps and Nick we will use soaps Nick
but before we can make use of it let's
set up soaps itself top supports
multiple encryption methods and one of
the most basic ones is using age so easy
in fact we can straight up generate an
AG key from your SSH key which I assume
most of you already have here are the
two commands you can use to generate
your keys first one generates a new key
and puts it into config slop keys.txt
and the second command does the same
thing but instead of generating a new
key it simply converts your private SSH
key this means that the output key will
always be the same if you use the same
SSH key but one important thing to note
is that if you are using the second
command your SSH key needs to have no
passphrase or else it won't work the key
we just made will be used when we run
soaps a little bit later but before we
begin configuring soaps we also want to
get a public version of this key so just
run this command which you can also find
in the link in the description next
thing you want to do is create a doops
DOL file somewhere near your nze
configuration and it's going to hold
creation rules for your secrets files
those rules basically Define locations
of your secret files relative to the DOT
s. yaml and public Keys which are going
to be used to encrypt and decrypt those
files for our use case we want to have
at least one public key defined at the
top and at least one creation rule that
references it you can basically just
copy this file one to one only changing
the key itself so you can actually edit
your secrets optionally a name for it
and the path where you want your primary
Secrets file to be sub supports yaml
Json enn and binary formats so choose
whichever one you like now to finally
create a Secrets file CD into your
desired directory and run soaps space
name of the secrets file it will open
your preferred text editor defined by
the editor environment variable and you
can now simply fill the file with
whatever you want I'll put some stuff
from the nixops official GitHub page
here for later after saving and closing
your editor you will see that every
field gets encrypted you can now safely
store or send this file anywhere
including public G repost because the
only way to decrypt it now is to have
the private key that we created earlier
if we run the SS command again the file
gets decrypted once again and we can
easily Auto remove any data a basic sub
setup is complete and you can already
use it as is however we obviously want
to go one step further and integrate our
secrets into the Nyx configuration we
are going to be using a simple flake
setup for it so open your flake. n file
and add this Subs N input you can
optionally make its NYX packages follow
your primary NYX packages pass the
inputs to nyos modules with special arcs
and open the nyos configuration file
here we can finally import the module
and begin managing the secrets with NYX
first thing we want to do is Define the
pass to Secrets file and its file type
next add private keyp pass to ss. h. key
file attribute but make sure that it
only contains the key itself no extra
comments NYX will read this file when
you rebuild the system and decrypt your
secrets if it exists if it cannot find
the file or the key is incorrect it will
simply skip this step and build your
system successfully albeit without
Secrets this means that you can safely
distribute your configuration to other
people without worrying about leaking
private information or them not
understanding where Secrets come from
use the ss. secret set option to Define
path to your secrets with slashes
representing sub records or subclass
values from the secrets file I'm still
using an example Secrets file from sni's
GitHub page and after rebuilding the
configuration with following options we
can try checking our decrypted secrets
with a simple cat command all secrets
belong to the root user by default so
run sudo cat SL run/ secret SL example
key keys are nested in the secrets
directory the same way as in the NX file
or in your preferred file format Secrets
file so my service /y subd /y secret
will be located under / run/ secet /y
service SL my sub deer /p secret now if
you want to assign another owner to the
key simply pass their name to the secret
either as a string manually or by
grabbing it from your config after
rebuilding said user will have access to
the key in the same location without
Pudo another important thing to know
about Secrets is that so snakes does not
allow interpolating them into the files
during the build step because that's a
security risk so instead of creating
scripts or services that have Valu
embedded directly into them you need to
read them from files afterwards sounds
complicated let's create a simple system
D service to better understand how we
could do that we can begin by defining
the service itself which will contain
the script that we want to run when we
started and a service config in the
service config we want to assign a new
system user to the service and also its
working directory now we want to
actually Define the system user like so
and make sure that our secrets belongs
to it let's come back to the service and
in the script we can now do whatever you
want with the pass to the secret like
simply printing it out or using cat
command to get the value this
demonstrational script simply Echoes
some stuff into a text file but you can
use yours to fetch data from the
internet using a secret API for example
once again notice that we are not
interpolating the secret itself anywhere
and this service won't know any secret
data during the system buil phase only
afterwards when the service is started
it will run a cat command to retrieve
the password rebuild your system start
this service that we just created and
check out the in our services home
directory as you can see it successfully
used the secret password to fulfill its
malicious
intents and now I would like to thank
the sponsors of this video specifically
Victor ventes for a 20 per month
subscription Hoskins for a 10 per month
subscription Linux Rock for a 10 per
month subscription pz for a 10 per month
subscription not not for a 5 per month
subscription kinzoku for A1 per month
subscription and also jom for a 50
recent donation coffee supporter for a
10 recent donation
Thomas for a â‚¬ 10 recent donation and
answering their question I'm thinking
about making an XS course in the future
however currently I'm pretty busy so
we'll see how it goes niy Jer for a 6E
recent donation Magi 00 for a 5 recent
donation gate on the page for a 5 recent
donation yogurt for a 1 recent donation
and also aiding bat Ponder for a 10
super thanks on YouTube and dude 9501
for a $2 super thanks on YouTube as
usual don't forget to check out our
Discord server leave a like or a comment
if you enjoyed this video or or
subscribe if you are feeling extra
generous thanks for watching and I will
see you in the next one