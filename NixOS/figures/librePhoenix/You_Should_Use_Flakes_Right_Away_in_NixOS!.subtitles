hello everyone and welcome back to the
channel today's discussion is going to
be about basic nyos configuration and
getting started with Blakes so this is
for new to Nyx OS users but not
necessarily for new to Linux users you
should be familiar with the command line
the core utils later on a basic
knowledge of git is also necessary and
for some of the advanced stuff in NX OS
some knowledge of how programs are
compiled is going to be really
helpful now I recommend that if you're
starting with NYX OS and you want to
learn it you start it inside of a VM and
the reason is is because your NYX OS
setup all of the stuff that you do is
contained entirely within your
configuration so it's very easy to just
start inside of a VM get your
configuration working the way you want
it and then just jump jump to Bare Metal
when your system is in the state that
you like so to start off go ahead and
grab the nyos ISO from ny.org and set up
your
VM just a few recommendations as you set
up your VM your VM should have enough
memory and enough CPU cores to be able
to compile things because later on there
will be some cases where we have to comp
compile things from source and even more
importantly you need to make sure that
the VM has enough hard drive space if
the VM has less than 100 gigs of hard
drive space depending on how many
packages you have installed it might
actually be impossible to update it so
100 GB storage minimum and I'd recommend
more if you can afford
it so I have a tutorial VM already set
up so we're going to go into to
that and get
started okay here we are so once you
have nyos installed and you selected
whatever default desktop environment you
want to have on your system or maybe you
just did no desktop environment and
you're staring at a TTY now we're going
to take a look at the configuration
files that nixos is so welln for so to
start off grab a
terminal and navigate to/ Etsy nixos if
you look inside of this directory you're
going to see two files configuration.nix
and Hardware configuration.nix Hardware
configuration.nix is a file
automatically generated by nyos upon
install and it's tailored to your actual
Hardware so this is typically typically
not something you want to be messing
with all that much it's typically
something you just autogenerate on
install you can also generate it later
but it's there to set up configuration
for certain details of your system that
if you mess these up it may become
unbootable so we don't really mess
around with this one we mainly mess
around with the configuration.nix file
you can open this up with Nano cuz Nano
is the only
editor installed by
default and as you open up here there's
quite a bit of stuff going on here don't
be too afraid of the syntax just sort of
look through it and you'll notice
there's a few configuration options that
you can start messing with like for
example the host name maybe you want to
change the host name to something
different or maybe the time zone or the
local
though those are things that should have
been set up in the graphical installer
even more important than some of these
configuration options however is the
packages installed on the system and
there are two sets of these there are a
set of packages for your user and there
are a set of packages for the system for
now you can place whatever packages you
would like to install in either of these
locations and all you need to do is in
order to add an
application into your configuration is
go to this block and add the names of
the packages for example Vim wget git
these are really important things you'll
want to make sure you have them along
with any other programs that you like to
have around most of the package names
make total sense but there are a few
package names that don't make a lot of
sense and so there's a resource that I
like to use called my ni.com and it
looks kind of like this it's a nice
Search tool that you can use to search
up the names of various packages along
with the names of various options and an
example of some weirdly named packages
are many of the gnome packages like for
example giri giri is not just giri the
actual package name is gnome. geiri as
you're searching these packages will be
under NYX packages package and other
things like options are going to be NYX
packages SL option back to the VM though
once you have a few packages in the
system packages block or the user
packages block you can save the file and
now we will synchronize the system state
with the state of the configuration file
because these apps are not automatically
installed by default in order to
synchronize the system state with the
state of the configuration file we're
going to use the command pseudo nyos
rebuild
switch what this is going to do is look
at your configuration files figure out
what needs to be changed what needs to
be installed and then switch into that
config configuration as you do this you
will notice that there are a bunch of
references in the output to something
called the Nyx store and long story
short this is where all of the programs
that you install will live they don't
live in SL user bin or uh any of the
common locations they live in here but
more details on that later now before we
get any further on all of this we we are
going to be migrating the method of
configuring the system from what is
known as channels to
Blakes channels are the default way of
managing the versions of packages on
your system but most people in the Nyx
community at least the hardcore NYX
users have been gravitating towards
flakes for quite a while now and they
have a few advantages to them that makes
things a lot easier as you get farther
ahead and you get into some of the more
advanced stuff in NYX OS to give you
just a quick overview of channels versus
flakes the channels and flakes both
manage the versions of the packages but
the difference is that the flakes keep a
file called the flake. loock file which
stores all the information about exactly
which version every single package on
your system is is and you can imagine if
you track the flake. loock file using
git you have a literal time machine for
your entire system you can go back as
far as you want as far as you need to on
a moment's notice just by reverting your
git repo that you store your
configuration files in so flakes are
really cool so we're going to get those
set up as soon as possible the first
thing you have to do in order to setup
flakes is we have to go into the
configuration file and enable the
ability to use flakes so if we open up
the configuration.nix you can put this
option wherever you like I'm just going
to put it at the bottom here the option
is called
nx.
settings. experimental D
features and we want to enable two
experimental features NYX command and
flakes once you do this you can save the
configuration file and rebuild
again and there we go now we will have
access to the flake commands which are
normally disabled by default now onto
the actual creation of the flakes you
can navigate back to your home directory
and
I like to have a do files directory so
you can create that directory do files
you can name this whatever you want but
this is what I use I of course already
have it created and then you navigate to
this directory the first thing we're
going to do before we even touch the
flake is we are going to copy the
configuration.nix and Hardware
configuration.nix
from that Etc nios
directory into the files directory so
you have access to both of
them there we go then we're going to
start writing another NYX file called
the flake.
NX so with your favorite text editor
create flake. Nix and the basic
structure of a flake file starts with
some squiggly brackets and then inside
of these squiggly brackets we're going
to put three main components the first
component is the
description and this is just a string
describing what your flake is so I'm
just going to call it my first flake
then following the end of any line we
put a
semicolon the next section is the inputs
block and the final section is the
outputs
block what this is essentially going to
do is have a list of every single input
to the system It'll point to it will
essentially be pointing to a bunch of
git
repositories and then the outputs block
will tell what to do with those inputs
and in this case the output block is
going to be specifying the actual nyos
system that we want to build before we
get too far into this I'm going to just
save this and uh exit out of this
and now on my host system I passed
through the dot files directory from
that VM into
here so we can sort of see a little bit
more detail and I have a few tools
inside of my emac config that will help
us visualize what's going on here so as
you can see there are three things in
the flake description inputs and outputs
within each of these kind of like yaml
or or
Json we can create a hierarchical
structure so inputs will have a bunch of
things and each of those things may have
options or parts of them and so the
first thing we're going to add like this
is to the inputs block one necessary
component of the inputs block is going
to be NYX packages NYX packages is the
package repo for NYX OS and and so we
have to declare where to find that input
inside of the flake the way we do this
is through something like this we write
in NYX packages into the squiggly
brackets of inputs and then that equals
some more squiggly
brackets what we want to give then is
the URL that NYX packages is at and this
URL by default is going to be GitHub and
then NYX OS SL NX packages SL nios 23.0
5 that's the latest stable release of
nyos so if I save this we'll see on the
side area here how this is sort of
working is that we still have
description inputs and outputs but now
inputs has these components there
is the Nyx packages piece and then there
the UR is a part of Nyx packages if you
go and look at people's NYX OS configs
you will often times not see it written
out like this because there is a
shorthand for writing this exact
information and that shorthand is going
to look like this just NYX packages.
URL equals and then the aforementioned
GitHub
repo
and that is functionally identical to
this setup we have here where it's
actually showing the whole hierarchy
using the squiggly brackets a few things
of note to say about this actual URL is
that again this is a git repo so you can
actually go to GitHub and visit this
repo which we're going to do right
now so NYX packages if you search for it
here it is
and so essentially what's going on here
inside
of this is we're saying go to GitHub
find the nyos user or group find the Nyx
packages repository and then look for
the Nyx - 23.0 5 Branch you can change
this to whatever Branch you want and
there are a lot of branches to choose
from I recommend you stay with either
the latest stable which is NX os- 23.0 5
or you go to unstable which is nx-
unstable which in a config would look
something like
this since nyos is built around NYX
packages we can actually shorten this
even further and remove the whole GitHub
and Nyx OS part here and just say NYX
packages SL nios unstable or n -
23.0 and that is because nyos knows
where NYX packages is but when you are
specifying other inputs that are not
special like NYX packages you do have to
write out the whole thing like GitHub
NYX OS NX packages and then the branch
so with this that will do it for the
inputs block now we have to mess with
the outputs block so again as we're
thinking about this here the outputs
block should be the Nyx OS configuration
itself the actual system so we're going
to add that as a part of the output's
block and it is literally called nyos
configurations now we have to write some
stuff for that as well as you'll notice
here this says nyos
configurations not nyos configuration
so we can actually specify multiple
configurations here but we're only going
to specify one to start out and that
will be the actual configuration for the
current system to start this you give it
a name and usually people use their host
name for this but you can give it
whatever name you want and this is going
to be equal to li. nixos
system and then we have to put a few
more squiggly brackets because this is
actually a function that makes a nyos
system we have to pass a few arguments
into the function to tell it what to
actually build the two arguments we're
worried about here are system which
tells the architecture type so odds are
it's going to be x86 64- Linux and then
the other thing we have to pass into it
is
modules this is a list list of module
NYX files and what module NYX file do we
have so far well the only one we have
right now is the configuration.nix that
is a NYX module as I save it here we'll
see more on this outline on the right
side
here again we have the outputs block and
then part of the outputs is the nyos
configurations and then we have the nyos
tutorial this is the name of my
configuration that I have for this VM
and that has a system part to it and a
modules part to it so all this is really
just a hierarchical sort of structure
again kind of like yaml or Json many
people have commonly joked that nixos is
just yaml with functions if you're an
astute Observer you will notice that
there is actually an error here and the
error is coming around lib
and the error that's happening is it
does not know what lib actually is lib
or library is a part of Nyx packages and
essentially lib just contains a bunch of
really nice convenience functions that
we can use like nixos system which has
the instructions on how to build a nixos
system using a architecture and a bunch
of Nyx modules so we have to now now add
lib into the outputs in some fashion and
this is going to look really weird in a
sense so we're just going to go right
into it in order to pass lib from NYX
packages into this outputs block we're
going to have to do something like this
so outputs is now going to be equal to
some squiggly brackets in front
here and we put a bunch of stuff in
these squiggly brackets including
packages followed by a
colon and
then we need to use something called a
let binding so we're going to say
let lib equal NYX packages.
lib inside of this block for NYX OS
configurations so the outputs block is
still just this it's this still just
this NYX OS configurations but we're now
passing in the lib from NYX packages.
lib from the inputs into this actual
definition this essentially is a feature
of functional programming languages and
Nyx is a functional programming language
that you have to use lots of let
bindings in order to pass certain things
into other parts of the configuration
now I know that's not a very complete
explanation of what's going on here but
that's sort of what we have to do to get
started at least so with this assuming I
didn't miss any semicolons we should be
able to go back to the VM and get this
flake up and running so we're back
inside of the VM now and we now have our
flake. n written and ready to go and to
synchronize the system state with this
new flake setup we're just going to use
a slightly modified version of the
rebuild command which is pseudo nixos
rebuild switch Das Das flake and then
we're going to pass in this actual
directory that we're in the do files
directory so that it knows to go to this
directory and this flake to build the
system and we're going to realize that I
totally missed a semicolon somewhere so
if we go in and fix that let's see
here there it
is now we can try it
again and assuming that you didn't miss
any semicolons when you're running this
it will start doing something like this
it's going to evaluate the derivation
it's going to create a lock file that's
the flake. loock file we were talking
about before and it's going to now have
your system setup be using a
flake do keep in mind also that this
update may take a little while as it is
now going to be pulling the most recent
version of that channel whether it's 2
3.05 stable or unstable it's going to be
getting the most recent stuff as now it
is a flake it's going to prefer the
recent stuff and so you may have to wait
a little while for it to
update so hopefully then your rebuild
command return something successful like
this a common error that will prevent
you from switching into the new system
configuration using the flake is if your
host name on your computer is different
from the Nyx OS configurations name in
your flake. n so if you go to the flake.
NX the name of my nyos configuration is
NYX os- tutorial
and the host name of my system is also
ny- tututorial so when I ran pseudo
nixos rebuild switch I only needed to
specify the directory you know the
current directory in order to get this
to work but if these are different you
can specify the name of that
configuration in the flake. ni by
putting pound sign and then name of
configuration in the command and this
will select a configuration from the
flake. N that may be different from your
host name one last thing before we end
the video today is let's take a look at
the fancy flake. loock file that was
automatically created for us when we
switched using the flake. NX so if you
look at this
file you're going to see a lot of stuff
here and don't worry about all the stuff
that's going on here because you never
have to manually interact with this the
purpose of the fake. loock file is to
automatically manage the versions of
your inputs and your packages for you
and this is just sort of what it looks
like every time you update the system
you're going to be updating the flake.
loock file and because the flake
reference is the flake. loock file when
you synchronize the system state with
that flake. loock it will be essentially
updating the
packages how do you update the flake.
block then it's real simple you run the
command NYX flake update while inside of
yourt do files directory and this will
go and check all of the inputs and
update them to the most recent version
like this do keep in mind that running
NYX flake update does not update the
system it only updates the flake. loock
file so if we wanted to actually update
the system it would involve running both
NYX flake update and then pseudo nixos
rebuild switch d-lake and then
specifying the directory that we're in
for that flake so that's it for today I
hope you learned something about nyos I
hope this guide was helpful to you on
your nyos journey we're going to be
continuing the tutorial going forward
and next time we're going to be probably
exploring home manager and a few other
cool Nicks things so if you like this
video please leave a like comment on the
video please subscribe if you really
like the content that I'm providing here
if you dislike the video please leave a
dislike and let me know why you disliked
it in the comment section down below and
as always have a great rest of your
day